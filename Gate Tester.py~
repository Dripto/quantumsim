 # -*- coding: utf-8 -*-
"""
Created on Thu Feb  8 11:58:37 2018

@author: dript
"""

import numpy as np
import quantumsim.circuit
from quantumsim.circuit import Circuit
from quantumsim.circuit import uniform_noisy_sampler

c = Circuit(title="had")
c.add_qubit("1")
c.add_qubit("2")
#c.add_qubit("3")
#c.add_qubit("4")

#c.add_gate(quantumsim.circuit.RotateX("1",angle=0,time=0))
#c.add_gate(quantumsim.circuit.RotateX("2",angle=0,time=0))
#c.add_hadamard("1",time=1)
#c.add_hadamard("2",time=1)
c.order()

c1 = Circuit(title="three")
c1.add_qubit("1")
c1.add_qubit("2")
#c1.add_qubit("3")

#c1.add_hadamard("1",time=0)
c1.add_gate(quantumsim.circuit.RotateX("1",angle=np.pi,time=0))
#c1.add_gate(quantumsim.circuit.CNOT("3","2",time=0.5))
c1.add_gate(quantumsim.circuit.overCNOT("2","1",angle=0.4,k=0,p=.2,time=1))
#c1.add_gate(quantumsim.circuit.CNOT("3","2",time=2))


'''
s1 = quantumsim.circuit.uniform_sampler(seed=25)
s2 = quantumsim.circuit.uniform_sampler(seed=34)
s3 = quantumsim.circuit.uniform_sampler(seed=333)

c1.add_measurement("1",time=3,output_bit="m1", sampler=s1)
c1.add_measurement("2",time=3,output_bit="m2", sampler=s2)
c1.add_measurement("3",time=3,output_bit="m3", sampler=s3)


c2 = Circuit(title="fa")
c2.add_qubit("1")
c2.add_qubit("2")
c2.add_gate(quantumsim.circuit.XX("1", "2", chi=np.pi/4, time=0))

c3 = Circuit(title="ugh")
c3.add_qubit("1")
c3.add_qubit("2")
c3.add_qubit("3")

c3.add_hadamard("A",time=0)
c3.add_gate(quantumsim.circuit.XX("A","1",chi=np.pi*(1+0.1)/4, time=1))
c3.add_gate(quantumsim.circuit.XX("A","2",chi=np.pi*(1+0.1)/4, time=1))
'''
c2 = Circuit(title="three")
c2.add_qubit("1")
c2.add_qubit("2")
c2.add_qubit("3")

#c2.add_gate(quantumsim.circuit.XX("1", "2",chi=np.pi/4, time=0))
c2.add_hadamard("1",time=0)
c2.add_gate(quantumsim.circuit.RotateX("1",angle=0,time=0.5))
c2.add_gate(quantumsim.circuit.RotateX("3",angle=0,time=0.5))
c2.add_gate(quantumsim.circuit.RotateX("2",angle=0,time=0.5))


sdm1 = quantumsim.sparsedm.SparseDM(c.get_qubit_names())
sdm2 = quantumsim.sparsedm.SparseDM(c.get_qubit_names())
#sdm3 = quantumsim.sparsedm.SparseDM(c3.get_qubit_names())

c1.apply_to(sdm1)
#c1.apply_to(sdm1)
#c2.apply_to(sdm2)
#print(sdm.full_dm.to_array().round(3))
#c4.apply_to(sdm)
#print(sdm.full_dm.to_array().round(3))
#print(1-np.dot(sdm1.full_dm.dm.ravel(),sdm2.full_dm.dm.ravel()))
print(sdm1.full_dm.to_array().round(3))
#print(sdm1.classical)
'''
res = {'00':0, '11':0}
for i in range(10000):
    sdm = quantumsim.sparsedm.SparseDM(c.get_qubit_names())
    c4.apply_to(sdm)
    c5.apply_to(sdm)
    #print(sdm.full_dm.to_array().round(3))
    #print(str(sdm.classical["M1"]) + str(sdm.classical["M2"]))
    res[str(sdm.classical["M1"]) + str(sdm.classical["M2"])]+=1

print(res)
'''
